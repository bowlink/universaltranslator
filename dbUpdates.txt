ALTER TABLE `universaltranslator`.`configurationtransportdetails` 
ADD COLUMN `ergFileDownload` BIT(0) NULL DEFAULT b'0' AFTER `dmConfigKeyword`;

ALTER TABLE `universaltranslator`.`directmessagesin` 
ADD COLUMN `originalDirectMessage` VARCHAR(255) NULL AFTER `sendingResponse`;

ALTER TABLE `universaltranslator`.`configurationtransportdetails` 
ADD COLUMN `populateInboundAuditReport` BIT(1) NULL DEFAULT b'0' AFTER `ergFileDownload`;

ALTER TABLE `universaltranslator`.`batchuploads` 
ADD COLUMN `associatedBatchId` INT(11) NULL DEFAULT '0' AFTER `recipientEmail`;


USE `universaltranslator`;
DROP procedure IF EXISTS `copyColumn`;

DELIMITER $$
USE `universaltranslator`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `copyColumn`(in configId int, 
in batchId int, in srcField varchar(10),
in fieldA varchar(10), in fieldB varchar(10), in con1 varchar(255), 
in con2 varchar(255), in macroId int, in foroutboundProcessing boolean, in passClear int, in transactionId int)
proc_main:begin




call setInboundOutBoundTables (foroutboundProcessing,batchId);
select @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable
into @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable;

call getFinalStatusIds;
select @finalStatusIds into @finalStatusIds;



if (transactionId = 0) then
	set @stmt = concat("update ",@translatedTable, " set ",fieldA," = ", fieldB, 
    " where configId = ",configId," and ", @batchIdColumn, " = ",batchId," and statusId not in (",@finalStatusIds,");");	END if;


if (transactionId != 0) then
	set @stmt = concat("update ",@translatedTable, " set ",fieldA," = ",fieldB," where ",
	@transactionTable,"Id = ", transactionId,";");
	END if;

PREPARE stmt from @stmt;
EXECUTE stmt;


if (passClear = 2) THEN
BEGIN

END;
END IF;



select '';
end proc_main$$

DELIMITER ;


USE `universaltranslator`;
DROP procedure IF EXISTS `stringToDate`;

DELIMITER $$
USE `universaltranslator`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `stringToDate`(in configId int, 
in batchId int, in srcField varchar(10),
in fieldA varchar(10), in fieldB varchar(10), in con1 varchar(255), 
in con2 varchar(255), in macroId int, in foroutboundProcessing boolean, in passClear int, in transactionId int)
proc_main:begin



call setInboundOutBoundTables (foroutboundProcessing,batchId);
select @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable
into @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable;

call getFinalStatusIds;
select @finalStatusIds into @finalStatusIds;




if (transactionId = 0) then
set @stmt = concat("update ", @translatedTable," set ",fieldA,
" = str_to_date(" , srcField, ", '", con1,"')
 where  configId = ",configId," and ", @batchIdColumn, " = ",batchId," and statusId not in (",@finalStatusIds,");");



END if;

if (transactionId != 0) then
set @stmt = concat("update ", @translatedTable," set ",fieldA,
" = str_to_date(" , srcField, ", '", con1,"')
where ", @transactionTable ,"Id = ",transactionId, ";");
END if;


PREPARE stmt from @stmt;
EXECUTE stmt;


if (passClear = 2) THEN
BEGIN

END;
END IF;

select '';

end proc_main$$

DELIMITER ;


