USE `universaltranslator`;
DROP procedure IF EXISTS `insertValidationErrors`;

DELIMITER $$
USE `universaltranslator`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `insertValidationErrors`(in vtType int, in fieldNo int,
in batchUploadId int, in configId int, in transactionId int, in isFieldRequired boolean)
BEGIN

DECLARE regEx varchar(100) DEFAULT '';

CASE vtType
	WHEN 2 THEN 
		set regEx = '^[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$';
    WHEN 3 THEN 
		BEGIN 
			CALL `stripPhoneChars`(vtType, fieldNo, batchUploadId, configId, transactionId);
			set regEx ='^[0-9]{7,11}$';
		END;
	WHEN 4 THEN
		-- set regEx = '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(?:( [0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$';
        set regEx = '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])';
	WHEN 5 THEN 
		set regEx = '^-?[0-9]+[.]?[0-9]*$|^-?[.][0-9]+$';
	WHEN 6 THEN
		set regEx = '^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&\'\(\)\*\+,;=.]+$';
WHEN 7 THEN
        set regEx = '^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])';
    ELSE
        BEGIN
        END;
	END 
	CASE;

IF (transactionId = 0) THEN
set @stmt = concat(
'insert into transactioninerrors_',batchUploadId,' (batchUploadId, transactionInRecordsId, fieldNo, required, fieldValue, errorid, configId,
validationTypeId) SELECT ', batchUploadId, ', transactionInRecordsId, ',fieldNo,',',isFieldRequired,concat(',F',fieldNo),',2, ',configId, ',' , vtType,'  
 FROM transactiontranslatedin_',batchUploadId,' WHERE trim(F' ,fieldNo, ') not REGEXP  "', regEx, '" and F',fieldNo, ' is not null 
and length(F', fieldNo, ') != 0
and length(trim(F', fieldNo, ')) != 0
and length(REPLACE(REPLACE(F', fieldNo,' , "\n", ""), "\r", "") != 0)  
and  configId = ', configId,' and statusId not in (11,12,13,16,20);'
);

-- INSERT INTO sqlstmts (sqlstmt) values (@stmt);

BEGIN 
		PREPARE stmt from @stmt;
		EXECUTE stmt;
END; 
END IF;


END$$

DELIMITER ;




USE `universaltranslator`;
DROP procedure IF EXISTS `insertValidationErrorsOutbound`;

DELIMITER $$
USE `universaltranslator`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `insertValidationErrorsOutbound`(in vtType int, in fieldNo int,
in batchDownloadId int, in configId int, in transactionId int, in isFieldRequired boolean)
BEGIN

DECLARE regEx varchar(100) DEFAULT '';

CASE vtType
	WHEN 2 THEN 
		set regEx = '^[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$';
    WHEN 3 THEN 
		BEGIN 
			CALL `stripPhoneCharsOutbound`(vtType, fieldNo, batchDownloadId, configId, transactionId);
			set regEx ='^[0-9]{7,11}$';
		END;
	WHEN 4 THEN
		-- set regEx = '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(?:( [0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$';
         set regEx = '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])';
	WHEN 5 THEN 
		set regEx = '^-?[0-9]+[.]?[0-9]*$|^-?[.][0-9]+$';
	WHEN 6 THEN
		set regEx = '^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&\'\(\)\*\+,;=.]+$';
    WHEN 7 THEN
         set regEx = '^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])';    
    ELSE
        BEGIN
        END;
	END 
	CASE; 

IF (transactionId = 0) THEN
set @stmt = concat(
'insert into transactionouterrors_',batchDownloadId,' (batchDownloadId, transactionOutRecordsId, fieldNo, required, fieldValue, errorid, configId,
validationTypeId) SELECT ', batchDownloadId, ', transactionOutRecordsId, ',fieldNo,',',isFieldRequired,concat(',F',fieldNo),',2, ',configId, ',' , vtType,'  
 FROM transactiontranslatedout_',batchDownloadId,' WHERE trim(F' ,fieldNo, ') not REGEXP  "', regEx, '" and F',fieldNo, ' is not null 
and length(F', fieldNo, ') != 0
and length(trim(F', fieldNo, ')) != 0
and length(REPLACE(REPLACE(F', fieldNo,' , "\n", ""), "\r", "") != 0)  
and  configId = ', configId,' and statusId not in (11,12,13,16,18,20);'
);

BEGIN 
		PREPARE stmt from @stmt;
		EXECUTE stmt;
END; 
END IF;

IF (transactionId != 0) THEN

set @stmt= concat(
'insert into transactionouterrors_',batchDownloadId,' (batchDownloadId, transactionOutRecordsId, fieldNo, errorid, configId, 
validationTypeId) SELECT ', batchDownloadId, ', transactionOutRecordsId, ',fieldNo,',2, ', configId, ',', vtType,'  
 FROM transactiontranslatedout_',batchDownloadId,' WHERE trim(F' ,fieldNo, ') not REGEXP  "', regEx, '" and F',fieldNo, ' is not null 
and length(F', fieldNO, ') != 0
and length(trim(F', fieldNO, ')) != 0
and length(REPLACE(REPLACE(F', fieldNO,', "\n", ""), "\r", "") != 0) and configId = ', configId, ' and transactionTargetId 
 = ', transactionId, ';'
);

BEGIN 
		PREPARE stmt from @stmt;
		EXECUTE stmt;


END; 
END IF;

 
END

CREATE TABLE `universaltranslator`.`configurationupdatelogs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `configId` INT NOT NULL,
  `userId` INT NOT NULL,
  `dateCreated` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC));

ALTER TABLE `universaltranslator`.`configurationupdatelogs` 
ADD INDEX `configid` (`configId` ASC);

ALTER TABLE `universaltranslator`.`configurationupdatelogs` 
ADD COLUMN `updateMade` VARCHAR(500) NULL AFTER `dateCreated`;

USE `universaltranslator`;
DROP procedure IF EXISTS `MatchFAUpdateSF`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `MatchFAUpdateSF`(in configId int, 
in batchId int, in srcField varchar(10),
in fieldA varchar(10), in fieldB varchar(10), in con1 varchar(255), 
in con2 varchar(255), in macroId int, in foroutboundProcessing boolean, in passClear int, in transactionId int)
proc_main:begin



call setInboundOutBoundTables (foroutboundProcessing,batchId);
select @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable
into @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable;

call getFinalStatusIds;
select @finalStatusIds into @finalStatusIds;

if (transactionId = 0) then
	BEGIN
		set @stmt = concat("update ",@translatedTable, " set ",srcField," = '",con2,"' where trim(REPLACE(CONVERT(",fieldA," USING ASCII), '?','')) = '",con1,"'
		and  configId = ",configId," and ", @batchIdType," = ",batchId," and statusId not in (", @finalStatusIds, ");");
	END;
END if;

if (transactionId != 0) then
	BEGIN
		set @stmt = concat("update ",@translatedTable, " set ",srcField," = '",con2,"' where trim(REPLACE(CONVERT(",fieldA," USING ASCII), '?','')) = '",con1,"'
		and ",@transactionTable,"Id = ", transactionId, ";");
	END;
END if;



PREPARE stmt from @stmt;
EXECUTE stmt;


if (passClear = 2) THEN
BEGIN

if (transactionId = 0) then
	BEGIN
		set @stmt = concat("update ",@translatedTable, " set ",srcField," = null where trim(REPLACE(CONVERT(",fieldA," USING ASCII), '?','')) != '",con1,"'
		and  configId = ",configId," and ", @batchIdType," = ",batchId," and statusId not in (", @finalStatusIds, ");");
	END;
END if;

if (transactionId != 0) then
	BEGIN
		set @stmt = concat("update ",@translatedTable, " set ",srcField," = null where trim(REPLACE(CONVERT(",fieldA," USING ASCII), '?','')) != '",con1,"'
		and ",@transactionTable,"Id = ", transactionId, ";");
	END;
END if;

END;

END if;


select '';
end proc_main$$
DELIMITER ;

USE `universaltranslator`;
DROP procedure IF EXISTS `MatchSrcFieldUpdateFieldB`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `MatchSrcFieldUpdateFieldB`(in configId int, 
in batchId int, in srcField varchar(10),
in fieldA varchar(10), in fieldB varchar(10), in con1 varchar(255), 
in con2 varchar(255), in macroId int, in foroutboundProcessing boolean, in passClear int, in transactionId int)
proc_main:begin



call setInboundOutBoundTables (foroutboundProcessing,batchId);
select @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable
into @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable;

call getFinalStatusIds;
select @finalStatusIds into @finalStatusIds;


if (transactionId = 0) then
	BEGIN
	set @stmt = concat("update ",@translatedTable, " set ",fieldB," = '",con2,"' where trim(REPLACE(CONVERT(",srcField," USING ASCII), '?','')) = '",con1,"'
				and  configId = ",configId," and ", @batchIdType," = ",batchId," and statusId not in (",@finalStatusIds ,");");
	END;
	END if;

if (transactionId != 0) then
	BEGIN
	set @stmt = concat("update ",@translatedTable, " set ",fieldB," = '",con2,"' where trim(REPLACE(CONVERT(",srcField," USING ASCII), '?','')) = '",con1,"'
				and ",@transactionTable,"Id = ", transactionId, ";");
	END;
	END if;

PREPARE stmt from @stmt;
EXECUTE stmt;


if (passClear = 2) THEN
BEGIN
if (transactionId = 0) then
	BEGIN
	set @stmt = concat("update ",@translatedTable, " set ",fieldB," = null where trim(REPLACE(CONVERT(",fieldB," USING ASCII), '?','')) != '",con2,"'
	and ",@transactionTable,"Id in (select id from ",@transactionTable,
	" where configId = ",configId," and ", @batchIdType," = ",batchId," and statusId not in (",@finalStatusIds,"));");
	PREPARE stmt from @stmt;
	EXECUTE stmt;
	END;
	END if;

if (transactionId != 0) then
	BEGIN
	set @stmt = concat("update ",@translatedTable, " set ",fieldB," = null where trim(REPLACE(CONVERT(",fieldB," USING ASCII), '?','')) != '",con2,"'
	and ",@transactionTable,"Id = ", transactionId, ";");
	PREPARE stmt from @stmt;
	EXECUTE stmt;
	END;
	END if;

END;
END IF;


select '';
end proc_main$$
DELIMITER ;
