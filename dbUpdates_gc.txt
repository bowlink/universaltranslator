/** delete stmts  applied to CA stage **/
DROP PROCEDURE if exists yyyymmddToDate;
delete from macro_names where formula = 'yyyymmddToDate';

drop procedure if exists dateyyyymmddTimeToDateTime;
delete from macro_names where formula = 'dateyyyymmddTimeToDateTime';

drop procedure if exists if1Con1ElseNull;
delete from macro_names where formula = 'if1Con1ElseNull';

drop procedure if exists if1Con1ElseCon2;
delete from macro_names where formula = 'if1Con1ElseCon2';

drop procedure if exists cat2Concat3ColsDelimNoSpaces;
delete from  macro_names where formula = 'cat2Concat3ColsDelimNoSpaces';

delete from  macro_names where formula = 'cat2Concat2ColsDelimNoSpaces';
drop procedure if exists cat2Concat2ColsDelimNoSpaces;

delete from  macro_names where formula = 'cat2DelTransWhenNull';
drop procedure if exists cat2DelTransWhenNull;

delete from  macro_names where formula = 'CleanTranslatedListTable';
drop procedure if exists CleanTranslatedListTable;

delete from  macro_names where formula = 'cat2ApplyCWTranslatedList';
drop procedure if exists cat2ApplyCWTranslatedList;

delete from  macro_names where formula = 'cat2ApplyCW';
drop procedure if exists cat2ApplyCW;

delete from  macro_names where formula = 'cat2CopyColumnIn';
drop procedure if exists cat2CopyColumnIn;

delete from macro_names where formula = 'addCharToString';
drop procedure if exists addCharToString;

drop procedure if exists dateyyyymmddTimeToDateTime;
delete from macro_names where formula = 'dateyyyymmddTimeToDateTime';

delete from macro_names where formula = 'addDelimiterEvery2Characters';
drop procedure if exists addDelimiterEvery2Characters;

drop procedure if exists ifDateCon1ElseNull;
delete from macro_names where formula = 'ifDateCon1ElseNull';

drop procedure if exists yyyymmddstripTime;
delete from macro_names where formula = 'yyyymmddstripTime';

drop procedure if exists ifNonDateSetNull;
delete from macro_names where formula = 'ifNonDateSetNull';

delete from macro_names where formula = 'dateYYYYMMDDHHMMSSMSToYYYYMMDDHHMMSS';
drop procedure if exists dateYYYYMMDDHHMMSSMSToYYYYMMDDHHMMSS;

drop procedure if exists concatColumnsToList;
delete from macro_names where formula = 'concatColumnsToList';

drop procedure if exists ArithmeticForSFAndFAUpdateFB;
delete from macro_names where formula = 'ArithmeticForSFAndFAUpdateFB';

drop procedure if exists DeleteTransactionWhenFieldIsNull;
delete from macro_names where formula = 'DeleteTransactionWhenFieldIsNull';
 
drop procedure if exists countListSize;
delete from macro_names where formula = 'countListSize';


drop procedure if exists populateWithBatchUploadId;
delete from macro_names where formula = 'populateWithBatchUploadId';

drop procedure if exists ifNonDateAndNotBlankReject;
delete from macro_names where formula = 'ifNonDateAndNotBlankReject';

drop procedure if exists ifNotBlankReject;


delete from macro_names where formula = 'StringToDateFor2DigitYears';
drop procedure if exists StringToDateFor2DigitYears;

delete from macro_names where formula = 'prependStringWithCon2IfLengthMataches';
drop procedure if exists prependStringWithCon2IfLengthMataches;

delete from macro_names where formula = 'CopyColumnTTItoTIR';
drop procedure if exists CopyColumnTTItoTIR;

drop procedure if exists prependStringWithCon2IfLengthMataches;

delete from macro_names where formula = 'GreaterThanEqualFieldAUpdateSrcField';
drop procedure if exists  	GreaterThanEqualFieldAUpdateSrcField;

delete from macro_names where formula = 'lessThanEqualFieldAUpdateFieldB';
drop procedure if exists  lessThanEqualFieldAUpdateFieldB;

delete from macro_names where formula = 'IfSFLen0orNullReplaceValue';
drop procedure if exists  IfSFLen0orNullReplaceValue;


drop procedure if exists ArithmeticConstantStoreInFA;
delete from macro_names where formula = 'ArithmeticConstantStoreInFA';

delete from macro_names where formula = 'CopyColumnTTItoTIR';
drop procedure if exists CopyColumnTTItoTIR;

drop procedure if exists applyCW;

drop procedure if exists BHCounseling;
drop procedure if exists BHMedServices;
drop procedure if exists closeOutReferral;

drop procedure if exists CompareFALengthForNotBlankReplaceWithCon2;

drop procedure if exists  Concat3ColsDelimNoSpaces;

drop procedure if exists concat3ColssWithDelimiterNoSpaces;

drop procedure if exists DateToyyyymmdd;

drop procedure if exists deleteTransaction;

drop procedure if exists DeleteTransactionWhenFieldAIsNull;

drop procedure if exists dropValueByPriorityInboundOnly;

drop procedure if exists FALessThanNumericCon1UpdateFBwithCon2;

drop procedure if exists FieldBGreaterThanEqualFieldAUpdateFieldA;

drop procedure if exists fix2DigitMySQLYears;

drop procedure if exists ifFAStartsWithCon1UpdateFBToCon2;

drop procedure if exists GreaterThanEqualFieldAUpdateFieldB;

drop procedure if exists IfFieldACon1andTFBlankInsertCon2Error;

drop procedure if exists CompareFALengthForNotBlankReplaceWithCon2;

drop procedure if exists Concat3ColsDelimNoSpaces;

drop procedure if exists concat3ColssWithDelimiterNoSpaces;

drop procedure if exists removeTransactionTargets;

drop procedure if exists deletetransaction;

drop procedure if exists deletetransactionisnull;

drop procedure if exists dropValueByPriorityInboundOnly;

drop procedure if exists ifFieldANotInListValuesSetToCon2;

drop procedure if exists ifFieldANotNumericSetFieldBToCon1;

drop procedure if exists IfMatchFieldAAndTFBlankSetTFValue;

drop procedure if exists ifNumLTThenError;

drop procedure if exists IfSFLen0orNullReplaceValueInFA;

drop procedure if exists ifSrcFieldBlankAndFACompareTo0ThenFieldBCon2;

drop procedure if exists MatchFieldAUpdateFieldB;

drop procedure if exists mmddyyyytoyyyymmdd;

drop procedure if exists NJPopulateCounseling;

drop procedure if exists NJProviderIdentifier;

drop procedure if exists PopulateTranslatedList;

drop procedure if exists populateUniqueKeyAndTTI;

drop procedure if exists updateFieldBToDistinctSrcFieldAsList;

drop procedure if exists UpdateFPRace;

drop procedure if exists UpdateToMaxMinForCol;

drop procedure if exists UpdateTranslatedListValueNotDistinct;

drop procedure if exists YYYYMMDDHHMMSSMSToYYYYMMDDHHMMSS;

drop procedure if exists yyyymmddTimeToDateTime;

drop procedure if exists yyyymmddTommddyyyy;

drop procedure if exists ifFieldANotCon1ThenNull;

drop procedure if exists IfMatchFieldAAndTFBlankSetTFValue;

drop procedure if exists IfSFNullOrEmptySetFieldBToValueFieldA;

drop procedure if exists ListToRows;

drop procedure if exists NotInUse_DateToyyyymmdd;

drop procedure if exists removeDupFromListOld;

drop procedure if exists replaceChars;

drop procedure if exists updateFieldBToSrcFieldAsList;

drop procedure if exists yyyymmddTommddyyyy;

UPDATE `universaltranslatorca`.`macro_names` SET macro_Name = 'Prepend and/or Append Strings', macro_short_Name = 'Prepend Append String', formula = 'appendPrependString', `FieldA_Question`='Please enter value you would like to prepend', `FieldB_Question`='Prepend if the field is blank (Y/N).', `Con1_Question`='Please enter value you would like to append', `Con2_Question`='Append if the field is blank (Y/N).' WHERE `ID`='102';
drop procedure if exists appendPrependStringIfNotBlank;
delete from macro_names where id = 79;

update macro_names set fieldA_Question = '', fieldB_Question = '' where formula = 'stringToDate';

UPDATE `universaltranslatorca`.`macro_Names` SET `Con1_Question`='Please enter source SF\'s date value separator.  e.g. -, ., /', `Con2_Question`='Please enter target SF\'s date value separator.  e.g. -, ., /' WHERE `ID`='68';
UPDATE `universaltranslatorca`.`macro_Names` SET `Con1_Question`='Please enter source SF\'s date value separator.  e.g. -, ., /', `Con2_Question`='Please enter target SF\'s date value separator.  e.g. -, ., /' WHERE `ID`='69';

UPDATE `universaltranslatorca`.`macro_Names` SET `Macro_Name`='Date - yyyy*mm*dd to mm*dd*yyyy' WHERE `ID`='68';
UPDATE `universaltranslatorca`.`macro_Names` SET `Macro_Name`='Date - mm*dd*yyyy to yyyy*mm*dd' WHERE `ID`='69';

UPDATE `universaltranslatorca`.`macro_names` SET `FieldB_Question`='Handle MySQL 2 digit year limitations for 2 digit years ending in 30-69. (Y/N)', `Con1_Question`='Please enter the inbound string\'s date format', `Con2_Question`='Please enter the outbound string\'s date format' WHERE `ID`='112';
 
UPDATE `universaltranslatorca`.`macro_names` SET `Macro_Short_Name`='ifNotBlankError', `Formula`='ifNotBlankError' WHERE `ID`='150';

UPDATE `universaltranslatorca`.`macro_names` SET `CategoryId`='0', `Macro_Short_Name`='errorNonYearMonthTransactions', `Formula`='errorNonYearMonthTransactions' WHERE `ID`='152';

UPDATE `universaltranslatorca`.`macro_names` SET `Macro_Name`='Prepend String with Value if Length matches', `Macro_Short_Name`='prependCon2IfCon1Length', `Formula`='prependCon2IfCon1Length' WHERE `ID`='180';

INSERT INTO `macro_names` (`ID`, `CategoryId`, `Macro_Name`, `Macro_Short_Name`, `Formula`, `FieldA_Question`, `FieldB_Question`, `Con1_Question`, `Con2_Question`) VALUES ('197', '1', 'Compare Two Fields and Update SF to Con2', 'Compare Two Fields and Update SF to Con2', 'CompareTwoFieldsAndUpdateSF', 'Please enter field to compare source field to', ' ', 'Please enter comparison (< , <=, =, >, >=, !=)', 'Please enter value to update SF to');

drop procedure if exists appendStringWithCon1IfLengthMataches;

drop procedure IfFALengthNotMatchCon1ReplaceFBWithCon2;


UPDATE `universaltranslatorca`.`macro_Names` SET `Macro_Name`='If SF Length is not Con 1 Replace With Con 2', `Macro_Short_Name`='IfLengthNotCon1ReplaceWithCon2', `Formula`='IfLengthNotCon1ReplaceWithCon2', `FieldA_Question`='', `FieldB_Question`='', `Con2_Question`='Please enter value to replacement value' WHERE `ID`='147';
UPDATE `universaltranslatorca`.`macro_Names` SET `Macro_Short_Name`='appendCon2IfCon1Length', `Formula`='appendCon2IfCon1Length' WHERE `ID`='128';

UPDATE `universaltranslatorca`.`macro_names` SET formula = 'replaceChars1', Macro_Short_Name ='replaceChars1' WHERE `ID`='72';

UPDATE `universaltranslatorca`.`macro_names` SET `FieldA_Question`='', `FieldB_Question`='Please enter start range', `Con1_Question`='Please enter end range' WHERE `ID`='194';


USE `universaltranslatorca`;
DROP procedure IF EXISTS `replaceChars1`;

DELIMITER $$
USE `universaltranslatorca`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `replaceChars1`(in configId int, 
in batchId int, in srcField varchar(10),
in fieldA varchar(10), in fieldB varchar(10), in con1 varchar(255), 
in con2 varchar(255), in macroId int, in foroutboundProcessing boolean, in passClear int, in transactionId int)
proc_main:begin

call setInboundOutBoundTables (foroutboundProcessing,batchId);
select @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable
into @translatedTable, @transactionTable, @batchTable, @batchIdType , @errorTable;

call getFinalStatusIds;
select @finalStatusIds into @finalStatusIds;

			set @stmt = concat("update ", @translatedTable, " set ",srcField," = replace_ci(",srcField,", '",con1,"','",con2,"') 
			where  configId = ",configId," and ", @batchIdType," = ",batchId," and statusId not in (",@finalStatusIds ,");");

			PREPARE stmt from @stmt;
			EXECUTE stmt;
			DEALLOCATE PREPARE stmt;

end proc_main$$

DELIMITER ;


/** remove this after updating macro using this
drop procedure if exists yyyymmddToString;
**/
